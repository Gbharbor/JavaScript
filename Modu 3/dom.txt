_______________________________________
            DOM
_______________________________________
Document object model, cada tag de uma pagina html, e possivel manipular
a pagina 
_______________________________________

        SELECIONANDO ELEMENTOS 1
_______________________________________
Digamos que temos um h1 no nosso html,entao vamos pro console pelo navegador e fazer uma adicao chamado document, isso faz que chamamos todo conteudo da nossa pagina, e ao adicionar o ponto, conseguimos puxar elementos que queremos adicionar, pode ser por nome da tag, id, class, combinacoes etc.

        document.getElementsByTagName("h1")

Ao fazer isso aparecera no seu console, o colection e o simbolo de colchetes indicando um array, e ao abrir o array mostrar qual a posicao do h1, q nesse caso em especifico sera 0, ja que so temos um h1, mas se tivesse doias h1, pronto segueria a logica dos array.

Caso queira poderia colocar esse document inteiro em uma variavel, por exemplo:

        let elementos = document.getElementsByTagName("h1")

Sendo assim se voce colocar no console, a variavel elementos e dar enter, vera que esta salvo os dois h1, e digamos que tu queira visualizar o que tem no primeiro item porque ja sabemos que sao dois items nesse caso. Por ser um array que ja falamos antes, so definir a variavel e definir a value dele, digamos zero, vai retornar o primeiro h1, que nesse caso seria o Hello World

        elementos ///
        elementos[0]///

_______________________________________

        SELECIONANDO ELEMENTOS 2
_______________________________________
Ate entao aprendemos  a adicionar pelo nome da tag, mas isso nao e mt eficiente. digamos que queira selecionar uma div, e tua pagina tem 50 div, fica complicado de encontrar a div correta nesse caso.
Entao digamos que criei uma div com um id, e como faco para selecionar isso, temos varias formas, a primeira: supondo q tenha so uma div, daria pra usar como ja fizemos antes.
Mas a mais eficiente sera pelo ID: repare que o id esta no singular obviamente por id ser sempre apenas um.

    document.getElementById("teste");

Agora outro exemplo, imaginamos que tenhamos um botao e adicionamos uma class nele chamado botao mesmo. Podemos adicionar ele da seguinte maneira por ser uma class, mas repare aqui que e no plural, obviamente porque a class pode se repetir mais de uma vez. Uma dica sempre que e no plural, retorna sempre um array.

    document.getElementsByClassName("botao");

Aprendemos as 3 principais formas de pegar um elemento, porem tem uma aberta q tu consgue fazer como tu quiser, ele e mais geral, tu consegue pegar class ou id ou ate mesmo tag, usando a mesma logica do CSS.

    document.querySelector("#teste");
    document.querySelector(".botao");
    document.querySelector("h1");

Se quiser pode entrar em niveis tambem, digamos que criamos uma div com um ul e uns li, nesse caso se tu fizer so colocando o li , vai pegar o primeiro que ele encontrar, indo pela logica.

    document.querySelector("li");

Mas quero pegar todos:obviamente nesse caso ele vai retornar um array por se tratar de mais de um valor.

    document.querySelectorAll("li");

Porem e se eu tiver outra div com uma ul  e uma li tambem, dessa forma faremos como costumamos fazer em camadas do CSS.

    document.querySelectorAll("#teste ul li");
_______________________________________

        EVENTOS DE CLICK
_______________________________________
Entao eventos e quando fizemos acontecer algo quando clicamos literalmente.
Entao para entendermos temos 2 click quando clicamos, o press down e up, ou seja temos duas formas de editar o evento, entao digamos que temos o botao no nosso html, e dentro da tag button digitamos o nosso famoso onclick, e definimos o nome da nossa funcao que nesse exemplo sera 
clicou().

    HTML:
    <button class="botao" onclick="clicou()">Clique em mim</button>

    JS:
    function clicou() {
        console.log("clicou no botao);
    }

Porem temos outra forma de fazer executar esse evento, diretamente pelo javascript, obviamente tiramos o nosso onlick do html, ja que vamos usar outro metodo.
Entao selecionamos o elemento, atraves do:documentquerySelector(".botao");. A seguir disso posso adicionar uma variavel para essa adicao, por exemplo let botao. Agora vamos adicionar um evento que nao vimos ainda chamado botao.add.EventListene("click",)
Em seguida vamos adicionar a funcao que criamos que no caso e clicou, mas repare que n estou executando a funcao, estou apenas mencionando ela, isso e a primeira opcao.
 
        let botao = document.querySelector(".botao");
        botao.addEventListener("click", clicou);

Outra forma desconsiderando que ja criei a funcao la em cima, poderia criar a funcao diretamente dentro do 
.addEventListener. 
        
        let botao = document.querySelector(".botao");
        botao.addEventListener("click", function() {
            clicou()
        });

Se quiser pode resumir e usar arrow function, para comprimir.

        let botao = document.querySelector(".botao");
        botao.addEventListener("click",()=> {
            clicou();
        });

Porem tambem pode adicionar tudo na mesma linha, sem precisar criar uma variavel para o selector.

        document.querySelector(".botao").addEventListener("click",()=>{
            clicou();
        })