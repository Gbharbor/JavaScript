-------------------------------------------
        INTRODUCAO A ARRAY
-------------------------------------------

->  Entao vamos criar um Array de colors,
->  Repare que nesse exemplo, quando usamos no console, aparece os tres itens que criamos, e na ordem iniciando pelo 0 ate 2, nesse caso.

    [EXEMPLO]

    let colors = ["blue", "red", "green"];
    console.log(colors);

->  Nesse exemplo que estamos utilizando estamos usando strings, mas poderiamos usar numeros caso queira.
->  Mas digamos que eu queira acessar apenas um valor, digamos que queremos o blue, logicamente colocamos na ordem de exibicao que comeca pelo zero, ou seja se queremos o blue temos que usar o zero.

    [EXEMPLO]

    let colors = ["blue","red","green"];
    console.log(colors[0]);

->  Agora, vamos usar um exemplo usando numeros.
->  Nesse nosso exemplo, queremos mostrar o item dois, que sera o nosso 30.

    [EXEMPLO]

    let idades = [10, 20, 30];
    console.log(idades[2]);

->  Assim como podemos misturar, usando string,number bollean etc.
->  Como coloquei para aparecer o segundo valor, vai aparecer apenas o bollean 

    [EXEMPLO]

    let lista = ["arroz", 1, true];
    console.log(lista[2]);

->  E se eu quiser colocar um Array dentro de um Array? tambem posso ! 
->  No exemplo que vou fazer, coloquei a variavel nomes(array) dentro de outro lista(array).

    [EXEMPLO]

    let nomes = ["gui","sandro","adilson"];
    let lista = ["porto", nomes];
    console.log(lista[1][0]);

->  Tu tambem pode criar um array dentro do array, no caso literalmente:
->  E como fazemos para pegar executar eles?
->  Aqui e um pouco complicado de explicar, mas tem que imaginar matrizes.
->  Entao supondo que quero mostrar o "porto".
->  Entao, vamos comecar abrindo o valor "gui" que sera nosso valor zero do array lista.
->  ou seja: console.log(lista[0]);
->  Mas o valor "porto" esta dentro de outra Array, que no console contabiliza com o valor um, ja que "gui" e o nosso valor zero.
->  ou seja, console.log(lista[1]);
->  Agora ja estamos dentro do Array que queremos, mas preciso executar o "porto" que e o nosso valor zero do array um de lista.
->  Entao, dessa forma apenas colocamos a posicao dele no Array que ele esta inserido, que no caso e zero.
->  ou seja: console.log(lista[1][0]);

    [EXEMPLO]

    let lista = ["gui", ["porto","barreto"]];
    console.log(lista[1][0]);

->  Outro exemplo criando uma variavel, so para poder demostrar de outra forma.
->  Nesse caso criei a variavel puxando o Array um, que onde estao os sobrenomes, e no console, puxei a variavel sobrenome que e onde esta o Array com os sobrenomes que e o valor um, e determinei valor zero, porque quero o "porto" como sobrenome.

    [EXEMPLO]

    let nome = ["gui",["porto","barreto"]];
    let sobrenome = nome[1];
    console.log(sobrenome[0]);



-------------------------------------------
        OPERACOES BASICAS DE ARRAY
-------------------------------------------

->  Array tem muitas vertentes, mas vamos comecar pelo basico obviamente, Arrays e algo que levamos sempre conosco, porque e um dos mais importantes.
->  Vamos fazer um exemplo de ingredientes de um bolo.

    [EXEMPLO]

    let ingredientes = [
        "ovo",
        "farinha",
        "agua"
        "corante"
        "sal"
        "acucar"
    ];
    console.log(`total de ingredientes: ${ingredientes.length}`);

->  Repare que aqui fiz uma atualizacao de um item chamado .length isso nos diz quantos valores tem no Array que inseri.
->  E digamos que eu queira adicionar mais um ingrediente, como podemos fazer, existem varias formas.
->  Agora a dica de ouro, nunca faca desse modo que irei ensinar a seguir pois e desvantagem, por mais que sim de certo.
->  Entao, digamos que ja sabemos quantos ingredientes nos temos, podemos fazer assim:
->  ingredientes[5] = "cebola";
->  Repare que o valor e cinco, pois n pode esquecer que sempre comeca por zero, ou seja devido a isso cebola sera nosso valor 5.

   [EXEMPLO]

    let ingredientes = [
        "ovo",
        "farinha",
        "agua"
        "corante"
        "sal"
    ];
    ingredientes[5] = "cebola";
    console.log(`total de ingredientes: ${ingredientes.length}`);


->  Mas digamos que sem querer, vc confundiu e colocou:
->  ingredientes[6] = "cebola";
->  Nesse caso em especifico, no console, vai dizer que temos 7 ingredientes, e que nao faz nenhum sentido porque temos apenas 6 ingredientes, entao vamos entender porque isso acomtece.
->  Se dermos um console.log(ingredientes);
->  Veremos que vai pular do valor 4 para o 6, mesmo a cebola sendo considerada o sexto ingrediente, isso acontece porque o valor 5 foi "pulado", mas no console ele conta igual, ele so nao e exibido, esse valor 5 possui um chamado de Empty(vazio), o valor Empty tambem conta, por isso no console mostra length 7.
->  Inclusive caso queira, tu poderia substituir um valor caso queira, por exemplo vc queira substituir o valor "ovo" por "cenoura"
->  Sendo assim, ingredientes[0] = "cenoura";

   [EXEMPLO]

    let ingredientes = [
        "ovo",
        "farinha",
        "agua"
        "corante"
        "sal"
    ];
    ingredientes[6] = "cebola";
    console.log(ingredientes);
    console.log(`total de ingredientes: ${ingredientes.length}`);

->  Agora vamos aprender da forma mais correta, de adicionar itens nos nossos Arrays, sem precisar determinar o valor do Array, sendo assim fica mais dificil de errar.
->  Nesse caso vamos usar o ingredientes.push("cebola");
->  Agora se abrir console.log(ingredientes); ira mostrar na ordem correta esse novo valor que adicionamos.


    [EXEMPLO]

    let ingredientes = [
        "ovo",
        "farinha",
        "agua"
        "corante"
        "sal"
        "acucar"
    ];
    ingredientes.push("cebola");
    console.log(ingredientes);
    console.log(`total de ingredientes: ${ingredientes.length}`);

->  Caso tu queira, poderia criar um Array sem nenhum item, dentro dele e adicionar depois com o .push:

    [EXEMPLO]

    let ingredientes = [];
    ingredientes.push("ovo");   
    ingredientes.push("farinha");
    ingredientes.push("agua");
    console.log(ingredientes)
    console.log(`total de ingredientes: ${ingredientes.length}`);

->  Agora vamos usar duas funcoes distintas, a primeira e a funcao pop.
->  Essa funcao .pop() vai remover o ultimo item do meu Array, usando nosso exemplo ainda, a agua sera removida.

    [EXEMPLO]

    let ingredientes = [];
    ingredientes.push("ovo");   
    ingredientes.push("farinha");
    ingredientes.push("agua");

    ingredientes.pop();

    console.log(ingredientes)
    console.log(`total de ingredientes: ${ingredientes.length}`);

->  Mas digamos que tu queira removar o primeiro item do Array, usamos o .shift();
->  E usando nosso exemplo ainda, o ovo sera removido.

    [EXEMPLO]

    let ingredientes = [];
    ingredientes.push("ovo");
    ingredientes.push("farinha");
    ingredientes.push("agua");
    ingredientes.shift();
    console.log(ingredientes)
    console.log(`total de ingredientes: ${ingredientes.length}`);



-------------------------------------------
        EXERCICIO DE ARRAY 
-------------------------------------------

    [EXERCICIO]
    -1: No array abaixo, qual o numero que pega a Ferrari ?
    let carros = ["BMW","Ferrari","Mercedes"];
    [RESPOSTA]
    console.log(carros[1]);

    [EXERCICIO]
    -2: Troque a Ferrari por Audi.
    [RESPOSTA]
    carros[1] = "Audi";

    [EXERCICIO]
    -3: Adicione o valor Volvo a lista.
    [RESPOSTA]
    carros.push("volvo");

    [EXERCICIO]
    -4: Exiba quantos itens tem no Array.
    [RESPOSTA]
    console.log(`total de itens: ${carros.length});

______________________________________

        FUNCOES DE ARRAY 
_______________________________________

Agora um item interessante que nao foi visto,o comando join,entao de modo basico ele retorna uma string digamos assim.
Ou seja no exemplo que coloquei, deixei apenas um espaco nesse caso, em todos o sitens da minha variavel fruits, ele vai mostrar o valor do array uva por exemplo, e em seguida vai dar um espaco, e assim sucessivamente.

            let fruits = ["uva","laranja"];
            console.log(fruits.join(' '));

Digamos q tu queira uma virgula ou um traco, o que tu quiser tu adiciona dentro do join.
Geralmente usamos a virgula, mas vai depender muito do que tu quer fazer.

Agora uma outra dica , digamos que queremos trocar o ultimo item do nosso array, mas porem eu nao sei quantos itens eu tenho para poder especificar ele com o value [].
Dessa forma usamos dessa maneira: 

            let fruits = ["uva","laranja","pessego"];
            fruits[fruits.length - 1] = "pera";
            console.log(fruits.join(' '));

Ou seja chamei o length para mostrar a quantidade de value que tenho no array automatizado e diminui 1, ele indica pro console que meu total menos o ultimo que quero alterar, dessa maneira substituindo o pessego por pera.
_______________________________________

        ORDENACAO DE ARRAY
_______________________________________

Entao para comecar vamos aprender a ordenar por ordem alfabetica, usando o nome variavel mais o .sort();

            let fruits = ["maca","uva","laranja","banan"];
            fruits.sort();
            console.log(fruits);

Mas digamos que em vez de alfabetica tu queira que seja inversa, do Z ao A digamos assim, ainda n existe uma funcao especifica para isso, entao desse modo devemos criar um parametro, usando o nosso sort para dizer q e alfabetica e dps o .reverse para inverter.

            let fruits = ["maca","uva","laranja","banan"];
            fruits.sort();
            fruits.reverse();
            console.log(fruits);

Se voce usar apenas o .reverse , ira inverter igual, mas apenas o array padrao que tu ja criou, e nao a ordem inversa da alfabetica que queriamos demonstrar.

Agora vamos fazer um exemplo um pouco mais complexo, vamos criar um array de objetos.
Agora eu quero ordenar essa lista pelo ano do carro, nesse exemplo em especifico o nosso .sort n faz mt sentido pq n tem mt ordem para ele mudar porque temos objeto dentro do nosso array.
A questao do .sort aqui, vai ser q vamos ter q criar uma funcao dentro do .sort, pode ser uma funcao anonima ou arrow function, irei usar arrow function para ficar mais facil de entender.
Entao essa funcao que criei dentro do .sort vai definir item por item para ser executada.
Em resumo vamos dizer que item que fica na frente de quem,dessa forma usamos 0 , numero negativo(diminui um item) ou numero positivo(aumenta).
Dessa forma vamos chamar de a,b o a seria nosso item atual e o b qual ele se tornara
Entao quando defino uma condicional if else, e digo que se a.year > b.year ele ira pra frente retornando 1, caso contrario ira pra tras retornando -1 , lembre se que esses valores sao como se fossem posicoes na ordem.

            let cars = [ 
                { brand: 'fiat', year: 2022},
                { brand: 'bmw', year: 2018},
                { brand: 'ferrari', year: 2020}
            ]
            cars.sort((a,b) => {
                if(a.year > b.year) {
                    return 1;
                } else {
                    return -1;
                }
            });
            console.log(cars);

 Poderia fazer de uma forma mais complexa caso queira, por exemplo, definifir se b for menor, ai retorna -1 e entao o o else retorna o 0, e uma forma com mais detalhes de demonstrar.

            cars.sort((a,b) => {
                if(a.year > b.year) {
                    return 1;
                } else if (a.year < b.year) {
                    return -1;
                } else {
                    return 0;
                }
            });
            console.log(cars);

 Para concluir a logica por ser mais complexo, digamos que o codigo roda e ele analisa os 2 primeiros valores do array verifica qual tem o ano maior, ele percebe que o valor 1 tem um ano maior, dessa forma por ser o valor um sera o nosso a da funcao, sendo assim por ser um ano maior, ele cai uma posicao em relacao ao valor 2, e vai rodando ate todos valores do array serem analisados e ordenados.

Agora vamos simplificar, aprendemos a logica dessa funcao, entao vamos ser mais direto.
Essa conta vai retornar um numero positivo negativo ou zero, dessa forma os valores tambem se ordenam da mesma forma.
Para ser bem literal, a gente literalmete pode imaginar no caso do nosso exemplo que sao os anos dos carros, fazendo a conta deles o valor a(2022) - b(2018) , vai dar positivo dessa forma o fiat "vai pra frente" 

            cars.sort((a,b) => {
                return a.year - b.year;
            });

 Vou simplificar um pouco mais, ja aprendemos isso em functions, mas so pra praticar, sim doideira imaginar que ficou em apenas uma linha tudo aquilo. 

            cars.sort((a,b) => a.year - b.year;);

Ah mas eu quero o inverso, quero o mais novo primeiro, nesse caso so inverter a por b 

            cars.sort((a,b) => b.year - a.year;);