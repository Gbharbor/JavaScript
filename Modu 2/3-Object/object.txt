-------------------------------------------
        O QUE SAO OBJETOS ?
-------------------------------------------

->  Entao sao muito semelhantes a Arrays, porem de forma bem resumida usamos as chaves {} ao inves de colchetes[].
->  Entao vamos criar um exemplo aqui com uma variavel string, e um Array e dps o nosso objeto.
->  O primeiro ponto importante dos objetos, e que quando formos referenciar, nao usamos a logica dos valores igual temos nos Arrays, e sim os itens diretamente.

    [EXEMPLO]

    let nomes = "Gui";
    let nomes = ["Gui","Pedro"];
    let personagens = {
        nome: "Gui",
        idade: 90,
        pais: "Brasil",
    }

->  Ok agr revisamos brevemente do que se trata, porem vamos usar o exemplo que criamos so com objetos, e para a exibicao temos a forma padrao de sempre, referenciando a variavel no console.

    [EXEMPLO]

    let personagem = {
        nome: "Gui",
        idade: 90,
        pais: "Brasil",
    }
    console.log(personagem);

->  Mas digamos que queremos mostrar no console apenas um valor, no caso dos arrays usavamos o esquema do valor zero... ja aqui e diferente, como e um objeto adicionamos a variavel depois add ponto e colocamos o nome do objeto.

    [EXEMPLO]

    let personagens = {
        nome: "Gui",
        idade: 90,
        pais: "Brasil",
    }
    console.log(personagem.nome);

->  Agora um exemplo que demonstra uma frase, so para praticar.

    [EXEMPLO]

    let personagens = {
    nome: "Gui",
    idade: 90,
    pais: "Brasil,
    }
    console.log(`${personagem.nome} tem ${personagem.idade} anos.`);

->  Outra questao interessante, voce pode criar um objeto dentrou de outro objeto, igual faziamos nos array, a diferenca que acessamos aquele valor usando os ponto, mas o metodo e o mesmo em modo cascata.

    [EXEMPLO]

    let personagens = {
    nome: "Gui",
    idade: 90,
    pais: "Brasil",
        caracteristicas: {
            forca: 20,
            magia: 5,
            stamina: 15
        }
    }
    console.log(`${personagem.nome} tem ${personagem.idade} anos.`);
    console.log(personagem.caracteristicas.magia);

->  Inclusive, caso queira poderia colocar um Array dentro de um objeto, e para buscar esse array e a mesma logica, que aprendemos em Array.

    [EXEMPLO]

    let personagens = {
    nome: "Gui",
    idade: 90,
    pais: "Brasil",
    olhos: ["preto","azul"],
        caracteristicas: {
            forca: 20,
            magia: 5,
            stamina: 15
        }
    }
    console.log(`${personagem.nome} tem ${personagem.idade} anos.`);
    console.log(personagem.caracteristicas.magia);
    console.log(personagem.olhos[1]);


-------------------------------------------
        ACESSANDO E ALTERANDO OBJETOS
-------------------------------------------

->  Agora como alteramos, a logica e bem parecida com o array, entao continuando com o nosso exemplo anterior da ultima aula, digamos que quero alterar a variavel nome de "Gui" para  "Pedro".
->  O modo e muito semelhante, so vai mudar que vamos usar o ponto ao referenciar o nome do objeto.
->  E digamos que eu queira aumentar uma caracteristica, como fariamos, nesse caso em especifico aumentei para mais 5 usando o 5+=;
->  Ok, mas agora eu quero adicionar mais um valor no meu Array que esta dentro do objeto, por exemplo a cor de olho verde.
->  Nesse caso, temos q lembrar que pra add array usamos o .push, referenciamos ate chegar onde queremos e entao adicionamos, se quisesse excluir o ultimo usamos o .pop, e se quisessemos excluir o primeiro .shift

    [EXEMPLO]

    let personagens = {
    nome: "Gui",
    idade: 90,
    pais: "Brasil",
    olhos: ["preto","azul"],
        caracteristicas: {
            forca: 20,
            magia: 5,
            stamina: 15
        }
    }
    personagem.nome = "Pedro";
    personagem.caracteristicas.forca += 5;
    personagem.olhos.push("verde);
    console.log(`${personagem.nome} tem ${personagem.idade} anos.`);
    console.log(personagem.caracteristicas.magia);
    console.log(personagem.olhos[1]);
    console.log(`Forca atualizada: ${personagem.caracteristicas.forca}`);
    console.log(personagem.olhos);


->  Agora vamos um exemplo um pouco mais complexo, so para praticar, temos aqui um objeto com o array carros, mas carros pode ter mais de uma caracteristica ou seja o mais correto e adicionar um objeto dentro desse array carros.
->  Agora, como acessamos o model fiat?
->  Simples, usamos  a logica, referenciamos a varriavel, depois escolhemos o objeto cars, e como cars e um array devemos definir se queremos o modelo 1 ou 2, como array e definido por valores que iniciam em 0, nesse caso do fiat nosso valor sera 0, entao esse nosso valor 0 e outro objeto, sendo assim usamos o ponto novamente para puxar o objeto que queremos, que nesse exemplo no caso seria o color.
->  Ou seja, character.cars[0].color;
->  Mas eu quero a ferrari porem so a color, nesse caso:
->  character.cars[1].color;


    let character = {
        name: "Gui",
        age: 90,
        cars: [
            {model: "Fiat",
             color: "black"},
            {model: "Ferrari",
             color: vermelho}
        ]
    }
    console.log(character.car[0].color);


-------------------------------------------
        FUNCAO DENTRO DE OBJETO
-------------------------------------------

->  Sim, podemo criar funcao dentro de objetos, mas antes vamos ver um exemplo de um objetct basico, aqui so para demonstrar a ideia do que queremos fazer.

    [EXEMPLO]

    let pessoa = {
        nome: "gui",
        sobrenome: "porto",
        }
    console.log(pessoa.nome + ' ' + pessoa.sobrenome);

->  Entao, ate ai tudo bem, agora vamos executar esses nomes e sobrenomes atraves de uma funcao que irei criar dentro desse objeto.
->  Essa aula e muito importante porque pode ser um pouco confuso, mas quando crio uma funcao dentro de um objeto, eu ja tenho o nome da funcao, entao a forma padrao que usamos, function funcao(){}, n e necessario usar o funcao, pq ja temos o nome criado, q no caso do nosso exemplo e o nomeCompleto.
->  ok, mas quando damos o return que ja esta dentro de um objeto, nos temos que usar uma keyword chamada this, que diz pra funcao que o return esta dentro do proprio objeto(proprio item), que a function esta enserida.
->  Ok, inserimos a keyword this e usamos o ponto para escolhar qual item queremos retornar, que no caso e nome e sobrenome, desse modo entao
->  return this.nome + ' ' + this.sobrenome;

    [EXEMPLO] 

    let pessoa = {
        nome: "Gui",
        sobrenome: "porto"
        nomeCompleto: function() {
            return this.nome + ' ' + this.sobrenome
        }
    }

->  Por uma questao estetica vou usar o template string, agora repare que se eu der no console.log(pessoa.nomeCompleto); vai aparecer a funcao que criamos mas nao os nomes que quero que aparece de fato.

    [EXEMPLO]

    let pessoa = {
        nome: "gui",
        sobrenome: "porto",
        nomeCompleto: function () {
            return `${this.nome} ${this.sobrenome}`;
        }
    }
    console.log(pessoa.nomeCompleto());

->  Como nosso console esta errado, devemos fazer dessa forma para aparecer os nomes de fato da funcao.
->Muito simples so aidiconamos os parenteses, de forma que  o console vai executar a funcao.

    [EXEMPLO]

    let pessoa = { 
        nome: "gui",
        sobrenome: "porto"
        nomeCompleto: function () {
            return `${this.nome} ${this.sobrenome}
            }
        }
        console.log(pessoa.nomeCompleto());

->  Outro detalhe super importante, nos nao conseguimos acessar os resultados do objeto se usarmos o arrow function na funcao que estiver dentro do objeto.
->  Esse arrow function, chamamos de anonimas, ou seja ela nao consegue referenciar o this, mesmo que tu tente vai dizer que os nomes estao indefinidos.
->  E para ser sincero, usa muito pouco o this, so estamos aprendendo.
->  E logico que a funcao vai continuar funcionando mesmo que nao use o this, por exemplo, vou usar o arrow function e n usar o this, obviamente vai funcionar mesmo usando outra variavel etc.

    [EXEMPLO]

    let pessoa = {
        nome: "gui",
        sobrenome: "porto",
        nomeCompleto: () => {
            return "blablabla"
        }
            }
    console.log(pessoa.nomeCompleto())