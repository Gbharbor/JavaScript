------------------------------------------
    POO no Javascript
------------------------------------------

Vamos entender algumas nomenclaturas
-programacao orientada a objetos (POO-PT/ OOP-EN)
-programacao procedural entre os dois : e um modo de digitar codigos, um abaixo de outro em sequencia, o JS e uma programacao procedural. Mas suporta a objetos.
-programacao funcional (PF-PT/FP-EN)
Assim como tem linguagens que so programa orientada a objetos, ja no js tu tem as duas opcoes.

E apartir da prox aula vms fazer atraves de: em resumo vms aprender duas formas de fazer a mesma coisa.
-classes
-funcoes/objetos
------------------------------------------
   Classes: Construtor e This
------------------------------------------
Entao vamos criar um tipo de "template" (objeto) que e uma classe de uma pessoa por exemplo, em resumo a gente molda uma "pessoa" tanto faz a pessoa, e dps vms criar os objetos por exemplo ana, joao, porto etc.
Geralmente usamos dps de class a primeira letra maiuscula.
Entao, td pessoa(objeto) tera caracteristicas e acoes q podem executar q podem fazer.
Entao para criar as propriedades, de uma pessoa por exemplo e sempre o nome.
Entao usaremos uma funcao chamada Constructor, q e executada q sempre q eu criar uma pessoa nova.
Entao vamos usar um Constructor(){}
Entao como vms o usar o nome, vms usar o .this + o nome da propriedade q eu quero criar this.name 
entao passei a variavel name para a propriedade name
This e algo q esta perto, e no js signficia q ta se referindo aquela pessoa em especifica.
Entao digamos q quero criar 3 pessoas 
Joao, maria e pedro, entao o this faz uma referencia a ele diretamente.
Vamos colocar outra propriedade this.age pra idade.
Outro ponto importante o nome q ta dentro da variavel n precisa ser o msm q crio na propriedade, tu escolhe a variavel, q esta dentro da function

    class Person {
        Constructor(name, age) {
            this.name = name;
            this.age = age;
        }
    }

Entao criado o "template" , n sera visualizado nada, teriamos q "aplicar ele" na nossa instancia para visualizar algo de fato.

------------------------------------------
        Classes: Inst√¢ncia
------------------------------------------
Agora vms criar as pessoas de fato, vms instanciar uma classe estou pegando o tamplate q criei, e vms estanciar e criar o objeto que seriam as pessoas.
Agora repare que quando utilizo new Person(), ele ta puxando a nossa function , ja exigindo o nome e a idade.
Entao pronto criei 3 pessoas (objetos) usando o nosso template.
Agora para exibir isso, usamos nosso console.log referenciamos a variavel p1,p2,p3 dps add o ponto e escolhemos oq queremos visualizar.

        class Person {
            constructor(name, age) {
                this.name = name;
                this.age = age;
            }
        }

        let p1 = new Person("Joao",20);
        let p2 = new Person("maria",30);
        let p3 = new Person("pedro",40);

        console.log(p1.age);
        console.log(p2.name);   

Vamos colocar so o nome, so para fazer um exemplo e coloca a idade fora, e n precisa por var nem let, so o nome q ja funciona.
Mas repara q por ta fora do constructor, a idade q tu definir ira ficar como padrao, ou seja se eu por p1.age vai mostrar 0.
Ah entao como faco para trocar a idade de joao.
pe1.age = 20.
Em resumo se eu n definir nesse caso, tds viram com zero anos, ah n ser q eu defina como fiz agr para o joao.
Entao vms visualizar todos, e vera q somente joao tera 20 anos nesse exemplo q criamos.

        class Person1 {
            age = 0;
            constructor(name) {
                this.name = name;
            }
        }
        let pe1 = new Person1("Joao");
        let pe2 = new Person1("maria");
        let pe3 = new Person1("pedro");
        pe1.age = 20
        console.log(`${pe1.name} tem ${pe1.age} anos.`);

Entao, para revisar oq estudamos, criamos o template q seria nosso class Person , definimos um constructor, e dps adicionamos nossos objetos, que tmb chamamos de instancias. que no caso foram os p1,p2,p3 etc.

------------------------------------------
        Classes: Action
------------------------------------------
Agora vms ver acoes q uma classe pode fazer. 
lembra q falamos q temos as propriedades e acoes, agr vms usar um exemplo de contador de passos de uma pessoa por exemplo.
Entao criamos antes do nosso construtor e ja definimos q tds pessoas inicalmente teram steps = 0; 
E como faremos para ir aumentando a contagem de steps, vms chamar de takeAStep () {} o nome da nossa funcao, e ele ira aumentando a contagem dos steps.
E vamos utilizar o this.steps++
Em seguida executamos a funcao pe1.takeAStep(); 
E entao, visualizamos no console.log
Vamos aplicar a funcao 2x, ira contar 2 steps obviamente.
Entao pronto acabamos de criar uma acao.
Existem outros tipos de acoes, por exemplo existe uma q troca propriedades, digamos q quero definir a idade mas sem precisar definir a idade de fato, podemos criar uma funcao para setar a idade chamada setAge(newAge) {}, e entao podemos verificar se e um numero de fato. usando nosso if (typeof newAge === "number") esse typeof mostra o tipo de variavel e se for somente um number ai ele ativa a funcao NewAge.
E entao executamos ela em seguida per1.setAge(20);
Entao, digamos q colocamos uma string tipo abc, obviamente n vai ler o valor e vai pegar o padrao q e zero anos do nosso age = 0;

        class Person2 {
            age = 0;
            steps = 0;
            constructor(name) {
                this.name = name;
            }
            takeAStep() {
                this.steps++;
            }
            setAge(newAge) {
                if(typeof newAge === "number") {
                    this.age = newAge;
                } else {
                    console.log("idade n aceita (so numero));
                }
            }
        }
        let per1 = new Person2("Joao");
        let per2 = new Person2("maria");
        per1.takeAStep();
        per1.takeAStep();
        console.log(`passos de ${per1.name}: ${per1.steps}`);

        per1.setAge(20);
        console.log(`${per1.name} tem ${per1.age} anos.`);

------------------------------------------
        Classes: GETTER e SETTER
------------------------------------------
Ok, usamos aquele esquema de idade, mas porem agora teremos algumas novidades, que o conceito chamado getter and SETTER.
E como se fossem duas funcoes, vms pra pratica para ficar mais facil de entender.
o getter e tipo um pegar e SETTER de colocar, digamos assim.

getter vai pegar um determinado valor do nosso objeto, geralmente quando usamos getter e setter, colocamos um _ antes da propriedade _age =0; por exemplo.
vms criar o getter, e vms usar o age como se fosse a variavel de uma funcao, do seguinte modo: get age(){} , entao ele retorna um determinado valor q eu queira,
repare q no console.log n preciso colocar o underscore, pq quando to pegando ela pra jogar no console, e como se eu tivesse executando a funcao get age(){}.
Vamos usar outro exemplo, digamos firstName e lastName no nosso constructor
, e entao criamos um get chamado fullName(){}, e ja fizemos algo parecido com isso, entao no console puxams o get fullName.
Entao em resumo eu uso ela como se fosse uma variavel dentro do console, mas na verdade ela e uma funcao.
Entao vimos como e o gettter q e o get, agr vms ver o setter para setar o valor dessa variavel, digamos vms fazer isso para o age() porem temos q determinar um valor dentro da "funcao" pq ja existe um age criado. entao digamos q seja set age(x) {}. Agora com esse setter criado posso usar ele como opcao para o age, em vez de seguir o padrao _age = 50; logico se vc colocar uma string n funcionar o set q tu criou vai pegar o 50 por padrao de novo. Mas so definir um if q so aceite number q ja funciona, igual fizemos no exemplo anterior.
Nem sempre e necessario criar, so e necessario quando n e tds valores que eu quero q uma propriedde seja aceita e um tipo de protecao, para n preencher algo q n deveria.


class Person3 {
    _age = 50;
    steps = 0;
        constructor(firstName,lastName) {
            this.firstName = firstName;
            this.lastName = lastName;
        }
    get age() {
        return this._age
    }   
    set age(x) {
        if (typeof x == "number") { 
            this._age = x;
        }
    }
    get fullName () {
        return `${this.firstName} ${this.lastName}`;
    }
    }

    let pers1 = new Person3("Joao","silva");
    let pers2 = new Person3("maria");

    pers1.age = 12;
    console.log(`${pers1.fullName} tem ${pers1.age} anos.`);